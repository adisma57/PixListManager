{"ast":null,"code":"// src/services/spotifyService.js\n\nimport axios from 'axios';\nimport { getToken } from './authService';\n\n/**\r\n * Création d'une instance axios préconfigurée pour l'API Spotify\r\n * avec injection du Bearer token via un interceptor.\r\n */\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.spotify.com/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n/* ------------------------------------------------------------------\r\n   FONCTIONS DE RECHERCHE\r\n   (recherche d'artistes, albums, titres)\r\n   ------------------------------------------------------------------ */\n\n/**\r\n * Recherche d'artistes par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets artistes\r\n */\nexport const searchArtists = async query => {\n  const response = await axiosInstance.get('/search', {\n    params: {\n      q: query,\n      type: 'artist',\n      limit: 50\n    }\n  });\n  return response.data.artists.items; // tableau d'artistes\n};\n\n/**\r\n * Recherche d'albums par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets albums\r\n */\nexport const searchAlbums = async query => {\n  const response = await axiosInstance.get('/search', {\n    params: {\n      q: query,\n      type: 'album',\n      limit: 50\n    }\n  });\n  return response.data.albums.items; // tableau d'albums\n};\n\n/**\r\n * Recherche de titres (tracks) par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets tracks\r\n */\nexport const searchTracks = async query => {\n  const response = await axiosInstance.get('/search', {\n    params: {\n      q: query,\n      type: 'track',\n      limit: 50\n    }\n  });\n  return response.data.tracks.items; // tableau de pistes\n};\n\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR ARTISTES\r\n   (infos de base, liste d'albums, etc.)\r\n   ------------------------------------------------------------------ */\n\n/**\r\n * Récupère les infos d'un artiste (nom, images, genres, popularité, etc.)\r\n * @param {string} artistId - ID de l'artiste Spotify\r\n * @returns {Object} - Objet artiste complet\r\n */\nexport const getArtistInfo = async artistId => {\n  const response = await axiosInstance.get(`/artists/${artistId}`);\n  return response.data; // ex: { id, name, images, genres, popularity, followers, ... }\n};\n\n/**\r\n * Récupère la liste des albums d'un artiste (albums, singles, compilations).\r\n * @param {string} artistId - ID de l'artiste\r\n * @param {boolean} includeLive - Indique s'il faut filtrer les albums contenant 'live' dans le titre\r\n * @returns {Array} - Tableau d'albums\r\n */\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\n  const response = await axiosInstance.get(`/artists/${artistId}/albums`, {\n    params: {\n      include_groups: 'album,single,compilation',\n      // ajoutez 'appears_on' si besoin\n      market: 'FR',\n      // ou 'US', etc.\n      limit: 50\n    }\n  });\n  let albums = response.data.items;\n  if (!includeLive) {\n    albums = albums.filter(album => !/live/i.test(album.name));\n  }\n  return albums;\n};\n\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR ALBUMS\r\n   (infos sur un album, liste de ses pistes)\r\n   ------------------------------------------------------------------ */\n\n/**\r\n * Récupère les détails complets d'un album (images, label, tracks, etc.).\r\n * @param {string} albumId - ID de l'album Spotify\r\n * @returns {Object} - Objet album (incluant album.tracks.items)\r\n */\nexport const getAlbumDetails = async albumId => {\n  const response = await axiosInstance.get(`/albums/${albumId}`);\n  return response.data; // ex: { id, name, label, images, tracks: { items: [...] }, ... }\n};\n\n/**\r\n * Récupère la liste des pistes d'un album.\r\n * Si getAlbumDetails renvoie déjà album.tracks.items, cette fonction peut être optionnelle.\r\n * @param {string} albumId - ID de l'album Spotify\r\n * @returns {Array} - Tableau de pistes\r\n */\nexport const getAlbumTracks = async albumId => {\n  const response = await axiosInstance.get(`/albums/${albumId}`);\n  return response.data.tracks.items; // ex: [{ id, name, duration_ms, ... }, ...]\n};\n\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR PLAYLISTS\r\n   (création, ajout de pistes, suppression, etc.)\r\n   ------------------------------------------------------------------ */\n\n/**\r\n * Récupère les playlists de l'utilisateur connecté\r\n * @returns {Array} - Liste de playlists\r\n */\nexport const getUserPlaylists = async () => {\n  const response = await axiosInstance.get('/me/playlists', {\n    params: {\n      limit: 50\n    } // ajustez selon vos besoins\n  });\n  return response.data.items; // tableau de playlists\n};\n\n/**\r\n * Récupère l'utilisateur courant (afin de connaître son ID).\r\n * @returns {Object} - Objet utilisateur { id, display_name, ... }\r\n */\nexport const getCurrentUser = async () => {\n  const response = await axiosInstance.get('/me');\n  return response.data;\n};\n\n/**\r\n * Crée une playlist pour l'utilisateur donné\r\n * @param {string} userId - ID de l'utilisateur\r\n * @param {string} playlistName - Nom de la playlist\r\n * @returns {Object} - Objet playlist créé (incluant son id)\r\n */\nexport const createPlaylist = async (userId, playlistName) => {\n  const response = await axiosInstance.post(`/users/${userId}/playlists`, {\n    name: playlistName,\n    public: false // ou true, selon vos besoins\n  });\n  return response.data; // ex: { id, name, ... }\n};\n\n/**\r\n * Ajoute des pistes (URIs) à la playlist spécifiée\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {Array<string>} trackUris - Tableau de URIs de pistes\r\n * @returns {Object} - Réponse de l'API Spotify\r\n */\nexport const addTracksToPlaylist = async (playlistId, trackUris) => {\n  // Spotify limite à 100 pistes par requête\n  const responses = [];\n  for (let i = 0; i < trackUris.length; i += 100) {\n    const chunk = trackUris.slice(i, i + 100);\n    const response = await axiosInstance.post(`/playlists/${playlistId}/tracks`, {\n      uris: chunk\n    });\n    responses.push(response.data);\n  }\n  return responses;\n};\n\n/**\r\n * Retire une piste d'une playlist\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {string} trackUri - URI de la piste à retirer\r\n * @returns {Object} - Réponse de l'API\r\n */\nexport const removeTrackFromPlaylist = async (playlistId, trackUri) => {\n  const response = await axiosInstance.request({\n    method: 'delete',\n    url: `/playlists/${playlistId}/tracks`,\n    data: {\n      tracks: [{\n        uri: trackUri\n      }]\n    }\n  });\n  return response.data;\n};\n\n/**\r\n * Réordonne les pistes d'une playlist\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {number} rangeStart - Index de la piste à déplacer\r\n * @param {number} insertBefore - Index de destination\r\n * @returns {Object} - Réponse de l'API\r\n */\nexport const reorderPlaylistTracks = async (playlistId, rangeStart, insertBefore) => {\n  const response = await axiosInstance.put(`/playlists/${playlistId}/tracks`, {\n    range_start: rangeStart,\n    insert_before: insertBefore\n  });\n  return response.data;\n};\nexport const getPlaylistDetails = async playlistId => {\n  const response = await axiosInstance.get(`/playlists/${playlistId}`);\n  return response.data;\n};\nexport const deletePlaylist = async playlistId => {\n  // Spotify supprime la playlist côté utilisateur en faisant un \"unfollow\"\n  // => DELETE /playlists/{playlist_id}/followers\n  const response = await axiosInstance.delete(`/playlists/${playlistId}/followers`);\n  return response.data;\n};\n\n/**\r\n * Récupère un lot de pistes pour une playlist donnée (100 max par requête).\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {number} offset - index de départ\r\n * @param {number} limit - nb de pistes (max 100)\r\n * @returns {object} - un objet { items: [...], next: 'URL', total: number, ... }\r\n */\nexport const getPlaylistTracks = async (playlistId, offset = 0, limit = 100) => {\n  const response = await axiosInstance.get(`/playlists/${playlistId}/tracks`, {\n    params: {\n      offset,\n      limit\n    }\n  });\n  // Spotify renvoie un objet { items, next, total, ... }\n  return response.data;\n};\n\n/**\r\n * Récupère les infos \"de base\" de la playlist (nom, description, images),\r\n * sans charger toutes les pistes.\r\n */\nexport const getPlaylistInfo = async playlistId => {\n  const response = await axiosInstance.get(`/playlists/${playlistId}`, {\n    params: {\n      fields: 'name,description,images'\n    }\n  });\n  return response.data;\n};\n\n/**\r\n * Récupère *toutes* les pistes d'une playlist en paginant offset/limit=100\r\n * et les concatène dans un tableau unique.\r\n * @param {string} playlistId\r\n * @returns {Array} - Tableau de tous les items (objets { track, ... })\r\n */\nexport const getAllPlaylistTracks = async playlistId => {\n  let offset = 0;\n  const limit = 100;\n  let allItems = [];\n  let finished = false;\n  while (!finished) {\n    const response = await axiosInstance.get(`/playlists/${playlistId}/tracks`, {\n      params: {\n        offset,\n        limit\n      }\n    });\n    const data = response.data; // { items, next, total, ... }\n    allItems = [...allItems, ...data.items];\n    offset += data.items.length;\n    if (!data.next || data.items.length < limit) {\n      finished = true;\n    }\n  }\n  return allItems; // un grand tableau\n};","map":{"version":3,"names":["axios","getToken","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","Authorization","searchArtists","query","response","get","params","q","type","limit","data","artists","items","searchAlbums","albums","searchTracks","tracks","getArtistInfo","artistId","getArtistAlbums","includeLive","include_groups","market","filter","album","test","name","getAlbumDetails","albumId","getAlbumTracks","getUserPlaylists","getCurrentUser","createPlaylist","userId","playlistName","post","public","addTracksToPlaylist","playlistId","trackUris","responses","i","length","chunk","slice","uris","push","removeTrackFromPlaylist","trackUri","method","url","uri","reorderPlaylistTracks","rangeStart","insertBefore","put","range_start","insert_before","getPlaylistDetails","deletePlaylist","delete","getPlaylistTracks","offset","getPlaylistInfo","fields","getAllPlaylistTracks","allItems","finished","next"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/services/spotifyService.js"],"sourcesContent":["// src/services/spotifyService.js\r\n\r\nimport axios from 'axios';\r\nimport { getToken } from './authService';\r\n\r\n/**\r\n * Création d'une instance axios préconfigurée pour l'API Spotify\r\n * avec injection du Bearer token via un interceptor.\r\n */\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'https://api.spotify.com/v1',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n/* ------------------------------------------------------------------\r\n   FONCTIONS DE RECHERCHE\r\n   (recherche d'artistes, albums, titres)\r\n   ------------------------------------------------------------------ */\r\n\r\n/**\r\n * Recherche d'artistes par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets artistes\r\n */\r\nexport const searchArtists = async (query) => {\r\n  const response = await axiosInstance.get('/search', {\r\n    params: {\r\n      q: query,\r\n      type: 'artist',\r\n      limit: 50,\r\n    },\r\n  });\r\n  return response.data.artists.items; // tableau d'artistes\r\n};\r\n\r\n/**\r\n * Recherche d'albums par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets albums\r\n */\r\nexport const searchAlbums = async (query) => {\r\n  const response = await axiosInstance.get('/search', {\r\n    params: {\r\n      q: query,\r\n      type: 'album',\r\n      limit: 50,\r\n    },\r\n  });\r\n  return response.data.albums.items; // tableau d'albums\r\n};\r\n\r\n/**\r\n * Recherche de titres (tracks) par nom (limite 20 par défaut).\r\n * @param {string} query - Texte à chercher\r\n * @returns {Array} - Tableau d'objets tracks\r\n */\r\nexport const searchTracks = async (query) => {\r\n  const response = await axiosInstance.get('/search', {\r\n    params: {\r\n      q: query,\r\n      type: 'track',\r\n      limit: 50,\r\n    },\r\n  });\r\n  return response.data.tracks.items; // tableau de pistes\r\n};\r\n\r\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR ARTISTES\r\n   (infos de base, liste d'albums, etc.)\r\n   ------------------------------------------------------------------ */\r\n\r\n/**\r\n * Récupère les infos d'un artiste (nom, images, genres, popularité, etc.)\r\n * @param {string} artistId - ID de l'artiste Spotify\r\n * @returns {Object} - Objet artiste complet\r\n */\r\nexport const getArtistInfo = async (artistId) => {\r\n  const response = await axiosInstance.get(`/artists/${artistId}`);\r\n  return response.data; // ex: { id, name, images, genres, popularity, followers, ... }\r\n};\r\n\r\n/**\r\n * Récupère la liste des albums d'un artiste (albums, singles, compilations).\r\n * @param {string} artistId - ID de l'artiste\r\n * @param {boolean} includeLive - Indique s'il faut filtrer les albums contenant 'live' dans le titre\r\n * @returns {Array} - Tableau d'albums\r\n */\r\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\r\n  const response = await axiosInstance.get(`/artists/${artistId}/albums`, {\r\n    params: {\r\n      include_groups: 'album,single,compilation', // ajoutez 'appears_on' si besoin\r\n      market: 'FR', // ou 'US', etc.\r\n      limit: 50,\r\n    },\r\n  });\r\n  let albums = response.data.items;\r\n  if (!includeLive) {\r\n    albums = albums.filter((album) => !/live/i.test(album.name));\r\n  }\r\n  return albums;\r\n};\r\n\r\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR ALBUMS\r\n   (infos sur un album, liste de ses pistes)\r\n   ------------------------------------------------------------------ */\r\n\r\n/**\r\n * Récupère les détails complets d'un album (images, label, tracks, etc.).\r\n * @param {string} albumId - ID de l'album Spotify\r\n * @returns {Object} - Objet album (incluant album.tracks.items)\r\n */\r\nexport const getAlbumDetails = async (albumId) => {\r\n  const response = await axiosInstance.get(`/albums/${albumId}`);\r\n  return response.data; // ex: { id, name, label, images, tracks: { items: [...] }, ... }\r\n};\r\n\r\n/**\r\n * Récupère la liste des pistes d'un album.\r\n * Si getAlbumDetails renvoie déjà album.tracks.items, cette fonction peut être optionnelle.\r\n * @param {string} albumId - ID de l'album Spotify\r\n * @returns {Array} - Tableau de pistes\r\n */\r\nexport const getAlbumTracks = async (albumId) => {\r\n  const response = await axiosInstance.get(`/albums/${albumId}`);\r\n  return response.data.tracks.items; // ex: [{ id, name, duration_ms, ... }, ...]\r\n};\r\n\r\n/* ------------------------------------------------------------------\r\n   FONCTIONS POUR PLAYLISTS\r\n   (création, ajout de pistes, suppression, etc.)\r\n   ------------------------------------------------------------------ */\r\n\r\n/**\r\n * Récupère les playlists de l'utilisateur connecté\r\n * @returns {Array} - Liste de playlists\r\n */\r\nexport const getUserPlaylists = async () => {\r\n  const response = await axiosInstance.get('/me/playlists', {\r\n    params: { limit: 50 }, // ajustez selon vos besoins\r\n  });\r\n  return response.data.items; // tableau de playlists\r\n};\r\n\r\n/**\r\n * Récupère l'utilisateur courant (afin de connaître son ID).\r\n * @returns {Object} - Objet utilisateur { id, display_name, ... }\r\n */\r\nexport const getCurrentUser = async () => {\r\n  const response = await axiosInstance.get('/me');\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Crée une playlist pour l'utilisateur donné\r\n * @param {string} userId - ID de l'utilisateur\r\n * @param {string} playlistName - Nom de la playlist\r\n * @returns {Object} - Objet playlist créé (incluant son id)\r\n */\r\nexport const createPlaylist = async (userId, playlistName) => {\r\n  const response = await axiosInstance.post(`/users/${userId}/playlists`, {\r\n    name: playlistName,\r\n    public: false, // ou true, selon vos besoins\r\n  });\r\n  return response.data; // ex: { id, name, ... }\r\n};\r\n\r\n/**\r\n * Ajoute des pistes (URIs) à la playlist spécifiée\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {Array<string>} trackUris - Tableau de URIs de pistes\r\n * @returns {Object} - Réponse de l'API Spotify\r\n */\r\nexport const addTracksToPlaylist = async (playlistId, trackUris) => {\r\n  // Spotify limite à 100 pistes par requête\r\n  const responses = [];\r\n  for (let i = 0; i < trackUris.length; i += 100) {\r\n    const chunk = trackUris.slice(i, i + 100);\r\n    const response = await axiosInstance.post(`/playlists/${playlistId}/tracks`, {\r\n      uris: chunk,\r\n    });\r\n    responses.push(response.data);\r\n  }\r\n  return responses;\r\n};\r\n\r\n/**\r\n * Retire une piste d'une playlist\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {string} trackUri - URI de la piste à retirer\r\n * @returns {Object} - Réponse de l'API\r\n */\r\nexport const removeTrackFromPlaylist = async (playlistId, trackUri) => {\r\n  const response = await axiosInstance.request({\r\n    method: 'delete',\r\n    url: `/playlists/${playlistId}/tracks`,\r\n    data: {\r\n      tracks: [{ uri: trackUri }],\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Réordonne les pistes d'une playlist\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {number} rangeStart - Index de la piste à déplacer\r\n * @param {number} insertBefore - Index de destination\r\n * @returns {Object} - Réponse de l'API\r\n */\r\nexport const reorderPlaylistTracks = async (playlistId, rangeStart, insertBefore) => {\r\n  const response = await axiosInstance.put(`/playlists/${playlistId}/tracks`, {\r\n    range_start: rangeStart,\r\n    insert_before: insertBefore,\r\n  });\r\n  return response.data;\r\n};\r\n\r\n\r\nexport const getPlaylistDetails = async (playlistId) => {\r\n  const response = await axiosInstance.get(`/playlists/${playlistId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const deletePlaylist = async (playlistId) => {\r\n  // Spotify supprime la playlist côté utilisateur en faisant un \"unfollow\"\r\n  // => DELETE /playlists/{playlist_id}/followers\r\n  const response = await axiosInstance.delete(`/playlists/${playlistId}/followers`);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Récupère un lot de pistes pour une playlist donnée (100 max par requête).\r\n * @param {string} playlistId - ID de la playlist\r\n * @param {number} offset - index de départ\r\n * @param {number} limit - nb de pistes (max 100)\r\n * @returns {object} - un objet { items: [...], next: 'URL', total: number, ... }\r\n */\r\nexport const getPlaylistTracks = async (playlistId, offset = 0, limit = 100) => {\r\n  const response = await axiosInstance.get(`/playlists/${playlistId}/tracks`, {\r\n    params: { offset, limit },\r\n  });\r\n  // Spotify renvoie un objet { items, next, total, ... }\r\n  return response.data; \r\n};\r\n\r\n/**\r\n * Récupère les infos \"de base\" de la playlist (nom, description, images),\r\n * sans charger toutes les pistes.\r\n */\r\nexport const getPlaylistInfo = async (playlistId) => {\r\n  const response = await axiosInstance.get(`/playlists/${playlistId}`, {\r\n    params: { fields: 'name,description,images' },\r\n  });\r\n  return response.data; \r\n};\r\n\r\n/**\r\n * Récupère *toutes* les pistes d'une playlist en paginant offset/limit=100\r\n * et les concatène dans un tableau unique.\r\n * @param {string} playlistId\r\n * @returns {Array} - Tableau de tous les items (objets { track, ... })\r\n */\r\nexport const getAllPlaylistTracks = async (playlistId) => {\r\n  let offset = 0;\r\n  const limit = 100;\r\n  let allItems = [];\r\n  let finished = false;\r\n\r\n  while (!finished) {\r\n    const response = await axiosInstance.get(`/playlists/${playlistId}/tracks`, {\r\n      params: { offset, limit },\r\n    });\r\n    const data = response.data; // { items, next, total, ... }\r\n    allItems = [...allItems, ...data.items];\r\n    offset += data.items.length;\r\n    if (!data.next || data.items.length < limit) {\r\n      finished = true;\r\n    }\r\n  }\r\n  return allItems; // un grand tableau\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}