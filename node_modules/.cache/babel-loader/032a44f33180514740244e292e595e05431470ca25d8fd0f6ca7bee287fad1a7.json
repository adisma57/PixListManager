{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\components\\\\PlaylistManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getUserPlaylists } from '../services/spotifyService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistManager = () => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [newPlaylistName, setNewPlaylistName] = useState('');\n  useEffect(() => {\n    async function fetchPlaylists() {\n      const data = await getUserPlaylists();\n      setPlaylists(data);\n    }\n    fetchPlaylists();\n  }, []);\n  const handleCreate = () => {\n    // Appel à l'API pour créer une nouvelle playlist\n    // Ici, nous simulons la création pour simplifier\n    if (newPlaylistName) {\n      const newPlaylist = {\n        id: Date.now().toString(),\n        name: newPlaylistName\n      };\n      setPlaylists([newPlaylist, ...playlists]);\n      setNewPlaylistName('');\n    }\n  };\n  const handleDelete = id => {\n    // Appel à l'API pour supprimer la playlist\n    // Simulation de la suppression\n    setPlaylists(playlists.filter(playlist => playlist.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mes Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nom de la nouvelle playlist\",\n        value: newPlaylistName,\n        onChange: e => setNewPlaylistName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreate,\n        children: \"Cr\\xE9er\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: playlist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(playlist.id),\n          children: \"Supprimer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, playlist.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistManager, \"TbmA1yRW+v1sYiGCqDUrj1bHKTY=\");\n_c = PlaylistManager;\nexport default PlaylistManager;\nvar _c;\n$RefreshReg$(_c, \"PlaylistManager\");","map":{"version":3,"names":["React","useState","useEffect","getUserPlaylists","jsxDEV","_jsxDEV","PlaylistManager","_s","playlists","setPlaylists","newPlaylistName","setNewPlaylistName","fetchPlaylists","data","handleCreate","newPlaylist","id","Date","now","toString","name","handleDelete","filter","playlist","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","style","display","justifyContent","alignItems","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/components/PlaylistManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getUserPlaylists } from '../services/spotifyService';\r\n\r\nconst PlaylistManager = () => {\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [newPlaylistName, setNewPlaylistName] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchPlaylists() {\r\n      const data = await getUserPlaylists();\r\n      setPlaylists(data);\r\n    }\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handleCreate = () => {\r\n    // Appel à l'API pour créer une nouvelle playlist\r\n    // Ici, nous simulons la création pour simplifier\r\n    if (newPlaylistName) {\r\n      const newPlaylist = { id: Date.now().toString(), name: newPlaylistName };\r\n      setPlaylists([newPlaylist, ...playlists]);\r\n      setNewPlaylistName('');\r\n    }\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    // Appel à l'API pour supprimer la playlist\r\n    // Simulation de la suppression\r\n    setPlaylists(playlists.filter(playlist => playlist.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Mes Playlists</h2>\r\n      <div>\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Nom de la nouvelle playlist\" \r\n          value={newPlaylistName} \r\n          onChange={(e) => setNewPlaylistName(e.target.value)}\r\n        />\r\n        <button onClick={handleCreate}>Créer</button>\r\n      </div>\r\n      <ul>\r\n        {playlists.map(playlist => (\r\n          <li key={playlist.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{playlist.name}</span>\r\n            <button onClick={() => handleDelete(playlist.id)}>Supprimer</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistManager;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,eAAeU,cAAcA,CAAA,EAAG;MAC9B,MAAMC,IAAI,GAAG,MAAMV,gBAAgB,CAAC,CAAC;MACrCM,YAAY,CAACI,IAAI,CAAC;IACpB;IACAD,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA,IAAIJ,eAAe,EAAE;MACnB,MAAMK,WAAW,GAAG;QAAEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QAAEC,IAAI,EAAEV;MAAgB,CAAC;MACxED,YAAY,CAAC,CAACM,WAAW,EAAE,GAAGP,SAAS,CAAC,CAAC;MACzCG,kBAAkB,CAAC,EAAE,CAAC;IACxB;EACF,CAAC;EAED,MAAMU,YAAY,GAAIL,EAAE,IAAK;IAC3B;IACA;IACAP,YAAY,CAACD,SAAS,CAACc,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACP,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChE,CAAC;EAED,oBACEX,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QACEwB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,6BAA6B;QACzCC,KAAK,EAAErB,eAAgB;QACvBsB,QAAQ,EAAGC,CAAC,IAAKtB,kBAAkB,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACFvB,OAAA;QAAQ8B,OAAO,EAAErB,YAAa;QAAAU,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eACNvB,OAAA;MAAAmB,QAAA,EACGhB,SAAS,CAAC4B,GAAG,CAACb,QAAQ,iBACrBlB,OAAA;QAAsBgC,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE,eAAe;UAAEC,UAAU,EAAE;QAAS,CAAE;QAAAhB,QAAA,gBACtGnB,OAAA;UAAAmB,QAAA,EAAOD,QAAQ,CAACH;QAAI;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC5BvB,OAAA;UAAQ8B,OAAO,EAAEA,CAAA,KAAMd,YAAY,CAACE,QAAQ,CAACP,EAAE,CAAE;UAAAQ,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF7DL,QAAQ,CAACP,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CAlDID,eAAe;AAAAmC,EAAA,GAAfnC,eAAe;AAoDrB,eAAeA,eAAe;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}