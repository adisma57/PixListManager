{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\components\\\\AddAlbumToPlaylistModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getUserPlaylists, addTracksToPlaylist, createPlaylist, getCurrentUser, getAlbumTracks } from '../services/spotifyService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddAlbumToPlaylistModal = ({\n  selectedAlbums,\n  onClose\n}) => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\n  const [newPlaylistName, setNewPlaylistName] = useState('');\n  useEffect(() => {\n    async function fetchPlaylists() {\n      const data = await getUserPlaylists();\n      setPlaylists(data);\n    }\n    fetchPlaylists();\n  }, []);\n  const handleSubmit = async () => {\n    let playlistId = selectedPlaylist;\n    if (newPlaylistName) {\n      const user = await getCurrentUser();\n      const newPlaylist = await createPlaylist(user.id, newPlaylistName);\n      playlistId = newPlaylist.id;\n    }\n    let trackUris = [];\n    // Pour chaque album sélectionné, récupérons les pistes via getAlbumTracks\n    for (const album of selectedAlbums) {\n      const tracks = await getAlbumTracks(album.id);\n      trackUris = trackUris.concat(tracks.map(track => track.uri));\n    }\n    if (trackUris.length > 0) {\n      await addTracksToPlaylist(playlistId, trackUris);\n      onClose();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ajouter albums \\xE0 une playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choisissez une playlist existante :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPlaylist,\n          onChange: e => setSelectedPlaylist(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"S\\xE9lectionnez une playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), playlists.map(pl => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pl.id,\n            children: pl.name\n          }, pl.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"OU cr\\xE9ez une nouvelle playlist :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nom de la nouvelle playlist\",\n          value: newPlaylistName,\n          onChange: e => setNewPlaylistName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Ajouter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"Annuler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AddAlbumToPlaylistModal, \"ZrzrDpJErW7yRt5EHc2qLluDSMY=\");\n_c = AddAlbumToPlaylistModal;\nexport default AddAlbumToPlaylistModal;\nvar _c;\n$RefreshReg$(_c, \"AddAlbumToPlaylistModal\");","map":{"version":3,"names":["React","useState","useEffect","getUserPlaylists","addTracksToPlaylist","createPlaylist","getCurrentUser","getAlbumTracks","jsxDEV","_jsxDEV","AddAlbumToPlaylistModal","selectedAlbums","onClose","_s","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","newPlaylistName","setNewPlaylistName","fetchPlaylists","data","handleSubmit","playlistId","user","newPlaylist","id","trackUris","album","tracks","concat","map","track","uri","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","pl","name","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/components/AddAlbumToPlaylistModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getUserPlaylists, addTracksToPlaylist, createPlaylist, getCurrentUser, getAlbumTracks } from '../services/spotifyService';\r\n\r\nconst AddAlbumToPlaylistModal = ({ selectedAlbums, onClose }) => {\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\r\n  const [newPlaylistName, setNewPlaylistName] = useState('');\r\n\r\n  useEffect(() => {\r\n    async function fetchPlaylists() {\r\n      const data = await getUserPlaylists();\r\n      setPlaylists(data);\r\n    }\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    let playlistId = selectedPlaylist;\r\n    if (newPlaylistName) {\r\n      const user = await getCurrentUser();\r\n      const newPlaylist = await createPlaylist(user.id, newPlaylistName);\r\n      playlistId = newPlaylist.id;\r\n    }\r\n    let trackUris = [];\r\n    // Pour chaque album sélectionné, récupérons les pistes via getAlbumTracks\r\n    for (const album of selectedAlbums) {\r\n      const tracks = await getAlbumTracks(album.id);\r\n      trackUris = trackUris.concat(tracks.map(track => track.uri));\r\n    }\r\n    if (trackUris.length > 0) {\r\n      await addTracksToPlaylist(playlistId, trackUris);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <h3>Ajouter albums à une playlist</h3>\r\n        <div>\r\n          <h4>Choisissez une playlist existante :</h4>\r\n          <select value={selectedPlaylist} onChange={(e) => setSelectedPlaylist(e.target.value)}>\r\n            <option value=\"\">Sélectionnez une playlist</option>\r\n            {playlists.map(pl => (\r\n              <option key={pl.id} value={pl.id}>{pl.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <h4>OU créez une nouvelle playlist :</h4>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Nom de la nouvelle playlist\" \r\n            value={newPlaylistName} \r\n            onChange={(e) => setNewPlaylistName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={handleSubmit}>Ajouter</button>\r\n          <button onClick={onClose}>Annuler</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddAlbumToPlaylistModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}