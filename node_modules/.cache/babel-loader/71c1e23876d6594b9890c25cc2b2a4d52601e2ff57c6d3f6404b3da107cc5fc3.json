{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\components\\\\AddToPlaylistModal.jsx\",\n  _s = $RefreshSig$();\n// src/components/AddToPlaylistModal.jsx\nimport React, { useState, useEffect } from 'react';\nimport { getUserPlaylists, addTracksToPlaylist, createPlaylist\n// Si vous souhaitez ajouter des albums par l'API Spotify :\n// addAlbumToPlaylist, ...\n} from '../services/spotifyService';\nimport './AddToPlaylistModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddToPlaylistModal = ({\n  items,\n  onClose\n}) => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\n  const [newPlaylistName, setNewPlaylistName] = useState('');\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const data = await getUserPlaylists();\n        setPlaylists(data);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\n      }\n    };\n    fetchPlaylists();\n  }, []);\n  const handleSubmit = async () => {\n    try {\n      let playlistId = selectedPlaylist;\n\n      // Si on souhaite créer une nouvelle playlist\n      if (newPlaylistName) {\n        const user = await getUserPlaylists(); // ou getCurrentUser() pour avoir l'ID user\n        // En réalité, on doit faire: createPlaylist(user.id, newPlaylistName)\n        // Supposez que createPlaylist retourne l'id de la nouvelle playlist\n        const newPl = await createPlaylist(user.id, newPlaylistName);\n        playlistId = newPl.id;\n      }\n\n      // Préparer la liste des tracks (URIs) si on a des titres ou des albums, etc.\n      let uris = [];\n      for (const item of items) {\n        if (item.type === 'track') {\n          uris.push(item.data.uri);\n        } else if (item.type === 'album') {\n          // Récupérer tous les titres de l'album, ex: let tracks = await getAlbumTracks(item.data.id);\n          // uris.push(...tracks.map(t => t.uri));\n        } else if (item.type === 'artist') {\n          // Logique selon vos besoins (ajouter tous les albums/titres de l'artiste ?)\n        }\n      }\n      if (uris.length > 0) {\n        await addTracksToPlaylist(playlistId, uris);\n      }\n      onClose();\n    } catch (err) {\n      console.error(\"Erreur lors de l'ajout :\", err);\n      alert(\"Impossible d'ajouter les éléments à la playlist.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Ajouter \", items.length, \" \\xE9l\\xE9ment(s) \\xE0 une playlist\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-playlist-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Playlist existante :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPlaylist,\n          onChange: e => setSelectedPlaylist(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"S\\xE9lectionnez une playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), playlists.map(pl => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pl.id,\n            children: pl.name\n          }, pl.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-playlist-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Ou cr\\xE9er une nouvelle playlist :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nom de la playlist\",\n          value: newPlaylistName,\n          onChange: e => setNewPlaylistName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Ajouter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"Annuler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AddToPlaylistModal, \"ZrzrDpJErW7yRt5EHc2qLluDSMY=\");\n_c = AddToPlaylistModal;\nexport default AddToPlaylistModal;\nvar _c;\n$RefreshReg$(_c, \"AddToPlaylistModal\");","map":{"version":3,"names":["React","useState","useEffect","getUserPlaylists","addTracksToPlaylist","createPlaylist","jsxDEV","_jsxDEV","AddToPlaylistModal","items","onClose","_s","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","newPlaylistName","setNewPlaylistName","fetchPlaylists","data","error","console","handleSubmit","playlistId","user","newPl","id","uris","item","type","push","uri","length","err","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","pl","name","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/components/AddToPlaylistModal.jsx"],"sourcesContent":["// src/components/AddToPlaylistModal.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  getUserPlaylists,\r\n  addTracksToPlaylist,\r\n  createPlaylist,\r\n  // Si vous souhaitez ajouter des albums par l'API Spotify :\r\n  // addAlbumToPlaylist, ...\r\n} from '../services/spotifyService';\r\nimport './AddToPlaylistModal.css';\r\n\r\nconst AddToPlaylistModal = ({ items, onClose }) => {\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\r\n  const [newPlaylistName, setNewPlaylistName] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const data = await getUserPlaylists();\r\n        setPlaylists(data);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\r\n      }\r\n    };\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      let playlistId = selectedPlaylist;\r\n\r\n      // Si on souhaite créer une nouvelle playlist\r\n      if (newPlaylistName) {\r\n        const user = await getUserPlaylists(); // ou getCurrentUser() pour avoir l'ID user\r\n        // En réalité, on doit faire: createPlaylist(user.id, newPlaylistName)\r\n        // Supposez que createPlaylist retourne l'id de la nouvelle playlist\r\n        const newPl = await createPlaylist(user.id, newPlaylistName);\r\n        playlistId = newPl.id;\r\n      }\r\n\r\n      // Préparer la liste des tracks (URIs) si on a des titres ou des albums, etc.\r\n      let uris = [];\r\n      for (const item of items) {\r\n        if (item.type === 'track') {\r\n          uris.push(item.data.uri);\r\n        } else if (item.type === 'album') {\r\n          // Récupérer tous les titres de l'album, ex: let tracks = await getAlbumTracks(item.data.id);\r\n          // uris.push(...tracks.map(t => t.uri));\r\n        } else if (item.type === 'artist') {\r\n          // Logique selon vos besoins (ajouter tous les albums/titres de l'artiste ?)\r\n        }\r\n      }\r\n\r\n      if (uris.length > 0) {\r\n        await addTracksToPlaylist(playlistId, uris);\r\n      }\r\n\r\n      onClose();\r\n    } catch (err) {\r\n      console.error(\"Erreur lors de l'ajout :\", err);\r\n      alert(\"Impossible d'ajouter les éléments à la playlist.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <h2>Ajouter {items.length} élément(s) à une playlist</h2>\r\n\r\n        <div className=\"select-playlist-section\">\r\n          <label>Playlist existante :</label>\r\n          <select\r\n            value={selectedPlaylist}\r\n            onChange={(e) => setSelectedPlaylist(e.target.value)}\r\n          >\r\n            <option value=\"\">Sélectionnez une playlist</option>\r\n            {playlists.map((pl) => (\r\n              <option key={pl.id} value={pl.id}>{pl.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"new-playlist-section\">\r\n          <label>Ou créer une nouvelle playlist :</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Nom de la playlist\"\r\n            value={newPlaylistName}\r\n            onChange={(e) => setNewPlaylistName(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"modal-actions\">\r\n          <button onClick={handleSubmit}>Ajouter</button>\r\n          <button onClick={onClose}>Annuler</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddToPlaylistModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}