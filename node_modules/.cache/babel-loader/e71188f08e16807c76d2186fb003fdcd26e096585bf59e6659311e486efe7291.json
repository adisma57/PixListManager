{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from './authService';\nconst API_BASE = 'https://api.spotify.com/v1';\nconst axiosInstance = axios.create({\n  baseURL: API_BASE,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const searchArtists = async query => {\n  const response = await axiosInstance.get(`/search`, {\n    params: {\n      q: query,\n      type: 'artist',\n      limit: 10\n    }\n  });\n  return response.data.artists.items;\n};\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\n  let response = await axiosInstance.get(`/artists/${artistId}/albums`, {\n    params: {\n      include_groups: 'album,single,appears_on,compilation',\n      market: 'US'\n    }\n  });\n  let albums = response.data.items;\n  if (!includeLive) {\n    albums = albums.filter(album => !album.name.toLowerCase().includes('live'));\n  }\n  return albums;\n};\nexport const getAlbumTracks = async albumId => {\n  const response = await axiosInstance.get(`/albums/${albumId}`);\n  return response.data.tracks.items;\n};\nexport const getUserPlaylists = async () => {\n  const response = await axiosInstance.get(`/me/playlists`);\n  return response.data.items;\n};\nexport const getCurrentUser = async () => {\n  const response = await axiosInstance.get(`/me`);\n  return response.data;\n};\nexport const createPlaylist = async (userId, playlistName) => {\n  const response = await axiosInstance.post(`/users/${userId}/playlists`, {\n    name: playlistName,\n    public: false\n  });\n  return response.data;\n};\nexport const deletePlaylist = async playlistId => {\n  // Spotify ne supprime pas définitivement une playlist ; on se désabonne (unfollow)\n  const response = await axiosInstance.delete(`/playlists/${playlistId}/followers`);\n  return response.data;\n};\n\n// src/services/spotifyService.js\nexport const getPlaylistDetails = async playlistId => {\n  // Récupérer les informations de base de la playlist\n  const response = await axiosInstance.get(`/playlists/${playlistId}`);\n  let playlistData = response.data;\n\n  // Récupérer toutes les pistes en paginant\n  let allTracks = [...playlistData.tracks.items];\n  let nextUrl = playlistData.tracks.next;\n  while (nextUrl) {\n    // Note : nextUrl est une URL complète, on peut l'utiliser directement avec axios\n    const nextResponse = await axios.get(nextUrl, {\n      headers: {\n        'Authorization': `Bearer ${getToken()}`\n      }\n    });\n    allTracks = allTracks.concat(nextResponse.data.items);\n    nextUrl = nextResponse.data.next;\n  }\n\n  // Remplacer la liste des pistes par la liste complète\n  playlistData.tracks.items = allTracks;\n  return playlistData;\n};\n\n// src/services/spotifyService.js\nexport const addTracksToPlaylist = async (playlistId, trackUris) => {\n  const responses = [];\n  // Boucle sur le tableau par tranche de 100 pistes\n  for (let i = 0; i < trackUris.length; i += 100) {\n    const chunk = trackUris.slice(i, i + 100);\n    const response = await axiosInstance.post(`/playlists/${playlistId}/tracks`, {\n      uris: chunk\n    });\n    responses.push(response.data);\n  }\n  return responses;\n};\nexport const removeTrackFromPlaylist = async (playlistId, trackUri) => {\n  const response = await axiosInstance.request({\n    method: 'delete',\n    url: `/playlists/${playlistId}/tracks`,\n    data: {\n      tracks: [{\n        uri: trackUri\n      }]\n    }\n  });\n  return response.data;\n};\nexport const reorderPlaylistTracks = async (playlistId, rangeStart, insertBefore) => {\n  const response = await axiosInstance.put(`/playlists/${playlistId}/tracks`, {\n    range_start: rangeStart,\n    insert_before: insertBefore\n  });\n  return response.data;\n};\n\n// Ajoutez ou modifiez ces exportations dans spotifyService.js\n\n// Pour obtenir les détails d'un album (titre, durée, liste de chansons, etc.)\nexport const getAlbumDetails = async albumId => {\n  const response = await axiosInstance.get(`/albums/${albumId}`);\n  return response.data;\n};\n\n// Pour rechercher des pistes (chansons)\nexport const searchTracks = async query => {\n  const response = await axiosInstance.get('/search', {\n    params: {\n      q: query,\n      type: 'track',\n      limit: 10\n    }\n  });\n  return response.data.tracks.items;\n};\nexport const searchAlbums = async query => {\n  const response = await axiosInstance.get('/search', {\n    params: {\n      q: query,\n      type: 'album',\n      limit: 10\n    }\n  });\n  return response.data.albums.items;\n};","map":{"version":3,"names":["axios","getToken","API_BASE","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","Authorization","searchArtists","query","response","get","params","q","type","limit","data","artists","items","getArtistAlbums","artistId","includeLive","include_groups","market","albums","filter","album","name","toLowerCase","includes","getAlbumTracks","albumId","tracks","getUserPlaylists","getCurrentUser","createPlaylist","userId","playlistName","post","public","deletePlaylist","playlistId","delete","getPlaylistDetails","playlistData","allTracks","nextUrl","next","nextResponse","concat","addTracksToPlaylist","trackUris","responses","i","length","chunk","slice","uris","push","removeTrackFromPlaylist","trackUri","method","url","uri","reorderPlaylistTracks","rangeStart","insertBefore","put","range_start","insert_before","getAlbumDetails","searchTracks","searchAlbums"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/services/spotifyService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken } from './authService';\r\n\r\nconst API_BASE = 'https://api.spotify.com/v1';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_BASE,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const searchArtists = async (query) => {\r\n  const response = await axiosInstance.get(`/search`, {\r\n    params: {\r\n      q: query,\r\n      type: 'artist',\r\n      limit: 10\r\n    }\r\n  });\r\n  return response.data.artists.items;\r\n};\r\n\r\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\r\n  let response = await axiosInstance.get(`/artists/${artistId}/albums`, {\r\n    params: {\r\n      include_groups: 'album,single,appears_on,compilation',\r\n      market: 'US'\r\n    }\r\n  });\r\n  let albums = response.data.items;\r\n  if (!includeLive) {\r\n    albums = albums.filter(album => !album.name.toLowerCase().includes('live'));\r\n  }\r\n  return albums;\r\n};\r\n\r\nexport const getAlbumTracks = async (albumId) => {\r\n  const response = await axiosInstance.get(`/albums/${albumId}`);\r\n  return response.data.tracks.items;\r\n};\r\n\r\nexport const getUserPlaylists = async () => {\r\n  const response = await axiosInstance.get(`/me/playlists`);\r\n  return response.data.items;\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  const response = await axiosInstance.get(`/me`);\r\n  return response.data;\r\n};\r\n\r\nexport const createPlaylist = async (userId, playlistName) => {\r\n  const response = await axiosInstance.post(`/users/${userId}/playlists`, {\r\n    name: playlistName,\r\n    public: false\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const deletePlaylist = async (playlistId) => {\r\n  // Spotify ne supprime pas définitivement une playlist ; on se désabonne (unfollow)\r\n  const response = await axiosInstance.delete(`/playlists/${playlistId}/followers`);\r\n  return response.data;\r\n};\r\n\r\n// src/services/spotifyService.js\r\nexport const getPlaylistDetails = async (playlistId) => {\r\n  // Récupérer les informations de base de la playlist\r\n  const response = await axiosInstance.get(`/playlists/${playlistId}`);\r\n  let playlistData = response.data;\r\n  \r\n  // Récupérer toutes les pistes en paginant\r\n  let allTracks = [...playlistData.tracks.items];\r\n  let nextUrl = playlistData.tracks.next;\r\n  \r\n  while (nextUrl) {\r\n    // Note : nextUrl est une URL complète, on peut l'utiliser directement avec axios\r\n    const nextResponse = await axios.get(nextUrl, {\r\n      headers: {\r\n        'Authorization': `Bearer ${getToken()}`\r\n      }\r\n    });\r\n    allTracks = allTracks.concat(nextResponse.data.items);\r\n    nextUrl = nextResponse.data.next;\r\n  }\r\n  \r\n  // Remplacer la liste des pistes par la liste complète\r\n  playlistData.tracks.items = allTracks;\r\n  return playlistData;\r\n};\r\n\r\n\r\n// src/services/spotifyService.js\r\nexport const addTracksToPlaylist = async (playlistId, trackUris) => {\r\n  const responses = [];\r\n  // Boucle sur le tableau par tranche de 100 pistes\r\n  for (let i = 0; i < trackUris.length; i += 100) {\r\n    const chunk = trackUris.slice(i, i + 100);\r\n    const response = await axiosInstance.post(`/playlists/${playlistId}/tracks`, {\r\n      uris: chunk\r\n    });\r\n    responses.push(response.data);\r\n  }\r\n  return responses;\r\n};\r\n\r\n\r\nexport const removeTrackFromPlaylist = async (playlistId, trackUri) => {\r\n  const response = await axiosInstance.request({\r\n    method: 'delete',\r\n    url: `/playlists/${playlistId}/tracks`,\r\n    data: {\r\n      tracks: [{ uri: trackUri }]\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const reorderPlaylistTracks = async (playlistId, rangeStart, insertBefore) => {\r\n  const response = await axiosInstance.put(`/playlists/${playlistId}/tracks`, {\r\n    range_start: rangeStart,\r\n    insert_before: insertBefore\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Ajoutez ou modifiez ces exportations dans spotifyService.js\r\n\r\n// Pour obtenir les détails d'un album (titre, durée, liste de chansons, etc.)\r\nexport const getAlbumDetails = async (albumId) => {\r\n  const response = await axiosInstance.get(`/albums/${albumId}`);\r\n  return response.data;\r\n};\r\n\r\n// Pour rechercher des pistes (chansons)\r\nexport const searchTracks = async (query) => {\r\n  const response = await axiosInstance.get('/search', {\r\n    params: { q: query, type: 'track', limit: 10 },\r\n  });\r\n  return response.data.tracks.items;\r\n};\r\nexport const searchAlbums = async (query) => {\r\n  const response = await axiosInstance.get('/search', {\r\n    params: { q: query, type: 'album', limit: 10 },\r\n  });\r\n  return response.data.albums.items;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}