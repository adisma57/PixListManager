{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\pages\\\\AlbumDetails.jsx\",\n  _s = $RefreshSig$();\n// src/components/AddAlbumToPlaylistModal.jsx\nimport React, { useState, useEffect } from 'react';\nimport { getUserPlaylists, createPlaylist, addTracksToPlaylist, getCurrentUser } from '../services/spotifyService';\nimport './AddAlbumToPlaylistModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddAlbumToPlaylistModal = ({\n  album,\n  tracks,\n  onClose\n}) => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\n  const [newPlaylistName, setNewPlaylistName] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const userPlaylists = await getUserPlaylists();\n        setPlaylists(userPlaylists);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\n      }\n    };\n    fetchPlaylists();\n  }, []);\n  const handleAddAlbum = async () => {\n    if (!tracks || tracks.length === 0) {\n      alert(\"Aucune piste à ajouter.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      let playlistId = selectedPlaylist;\n\n      // Créer une nouvelle playlist si on a saisi un nom\n      if (newPlaylistName) {\n        const user = await getCurrentUser(); // récupère l'ID utilisateur\n        const newPl = await createPlaylist(user.id, newPlaylistName);\n        playlistId = newPl.id;\n      }\n\n      // Construire la liste de URIs à partir des tracks\n      const trackUris = tracks.map(t => t.uri);\n      if (playlistId && trackUris.length > 0) {\n        await addTracksToPlaylist(playlistId, trackUris);\n      }\n      onClose();\n    } catch (error) {\n      console.error(\"Erreur lors de l'ajout de l'album :\", error);\n      alert(\"Impossible d'ajouter l'album à la playlist.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Ajouter l'album \\\"\", album.name, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nombre de pistes : \", tracks.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-playlist-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Choisir une playlist :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPlaylist,\n          onChange: e => setSelectedPlaylist(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- S\\xE9lectionnez --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), playlists.map(pl => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pl.id,\n            children: pl.name\n          }, pl.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-playlist-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Ou cr\\xE9er une nouvelle playlist :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nom de la nouvelle playlist\",\n          value: newPlaylistName,\n          onChange: e => setNewPlaylistName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddAlbum,\n          disabled: loading,\n          children: loading ? \"Ajout en cours...\" : \"Ajouter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"Annuler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(AddAlbumToPlaylistModal, \"4ZDergHH4ODm9QMCD8hGlyxRIdQ=\");\n_c = AddAlbumToPlaylistModal;\nexport default AddAlbumToPlaylistModal;\nvar _c;\n$RefreshReg$(_c, \"AddAlbumToPlaylistModal\");","map":{"version":3,"names":["React","useState","useEffect","getUserPlaylists","createPlaylist","addTracksToPlaylist","getCurrentUser","jsxDEV","_jsxDEV","AddAlbumToPlaylistModal","album","tracks","onClose","_s","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","newPlaylistName","setNewPlaylistName","loading","setLoading","fetchPlaylists","userPlaylists","error","console","handleAddAlbum","length","alert","playlistId","user","newPl","id","trackUris","map","t","uri","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","pl","type","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/pages/AlbumDetails.jsx"],"sourcesContent":["// src/components/AddAlbumToPlaylistModal.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getUserPlaylists, createPlaylist, addTracksToPlaylist, getCurrentUser } from '../services/spotifyService';\r\nimport './AddAlbumToPlaylistModal.css';\r\n\r\nconst AddAlbumToPlaylistModal = ({ album, tracks, onClose }) => {\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [selectedPlaylist, setSelectedPlaylist] = useState('');\r\n  const [newPlaylistName, setNewPlaylistName] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const userPlaylists = await getUserPlaylists();\r\n        setPlaylists(userPlaylists);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\r\n      }\r\n    };\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handleAddAlbum = async () => {\r\n    if (!tracks || tracks.length === 0) {\r\n      alert(\"Aucune piste à ajouter.\");\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      let playlistId = selectedPlaylist;\r\n\r\n      // Créer une nouvelle playlist si on a saisi un nom\r\n      if (newPlaylistName) {\r\n        const user = await getCurrentUser(); // récupère l'ID utilisateur\r\n        const newPl = await createPlaylist(user.id, newPlaylistName);\r\n        playlistId = newPl.id;\r\n      }\r\n\r\n      // Construire la liste de URIs à partir des tracks\r\n      const trackUris = tracks.map(t => t.uri);\r\n\r\n      if (playlistId && trackUris.length > 0) {\r\n        await addTracksToPlaylist(playlistId, trackUris);\r\n      }\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de l'ajout de l'album :\", error);\r\n      alert(\"Impossible d'ajouter l'album à la playlist.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal-content\">\r\n        <h2>Ajouter l'album \"{album.name}\"</h2>\r\n        <p>Nombre de pistes : {tracks.length}</p>\r\n\r\n        <div className=\"select-playlist-section\">\r\n          <label>Choisir une playlist :</label>\r\n          <select\r\n            value={selectedPlaylist}\r\n            onChange={(e) => setSelectedPlaylist(e.target.value)}\r\n          >\r\n            <option value=\"\">-- Sélectionnez --</option>\r\n            {playlists.map((pl) => (\r\n              <option key={pl.id} value={pl.id}>{pl.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"new-playlist-section\">\r\n          <label>Ou créer une nouvelle playlist :</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Nom de la nouvelle playlist\"\r\n            value={newPlaylistName}\r\n            onChange={(e) => setNewPlaylistName(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"modal-actions\">\r\n          <button onClick={handleAddAlbum} disabled={loading}>\r\n            {loading ? \"Ajout en cours...\" : \"Ajouter\"}\r\n          </button>\r\n          <button onClick={onClose}>Annuler</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddAlbumToPlaylistModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}