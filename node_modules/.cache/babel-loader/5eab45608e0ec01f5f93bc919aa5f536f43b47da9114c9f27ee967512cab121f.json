{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\pages\\\\PlaylistPage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/PlaylistPage.jsx\nimport React, { useState, useEffect } from 'react';\nimport { getUserPlaylists } from '../services/spotifyService';\nimport { useNavigate } from 'react-router-dom';\nimport './PlaylistPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaylistPage = () => {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [sortedPlaylists, setSortedPlaylists] = useState([]);\n  const [sortCriteria, setSortCriteria] = useState(\"name\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const data = await getUserPlaylists();\n        setPlaylists(data);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\n      }\n    };\n    fetchPlaylists();\n  }, []);\n\n  // Exemple de tri par différents critères  \n  // Note : Les propriétés comme duration, creationDate, modificationDate doivent être disponibles.\n  // Ici, on suppose que chaque playlist a au moins \"name\" et \"tracks.total\". Pour les autres, on utilise des valeurs fictives.\n  useEffect(() => {\n    const sorted = [...playlists].sort((a, b) => {\n      switch (sortCriteria) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"nbChansons\":\n          return a.tracks.total - b.tracks.total;\n        case \"creationDate\":\n          return new Date(a.created_at || 0) - new Date(b.created_at || 0);\n        case \"modificationDate\":\n          return new Date(a.modified_at || 0) - new Date(b.modified_at || 0);\n        default:\n          return 0;\n      }\n    });\n    setSortedPlaylists(sorted);\n  }, [playlists, sortCriteria]);\n  const handleViewDetails = playlistId => {\n    navigate(`/playlists/${playlistId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mes Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Tri par : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: sortCriteria,\n        onChange: e => setSortCriteria(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"name\",\n          children: \"Nom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"nbChansons\",\n          children: \"Nombre de chansons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"creationDate\",\n          children: \"Date de cr\\xE9ation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"modificationDate\",\n          children: \"Date de modification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlists-grid\",\n      children: sortedPlaylists.map(playlist => {\n        var _playlist$images$;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-card\",\n          onClick: () => handleViewDetails(playlist.id),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: ((_playlist$images$ = playlist.images[0]) === null || _playlist$images$ === void 0 ? void 0 : _playlist$images$.url) || '/default-playlist.png',\n            alt: playlist.name,\n            className: \"playlist-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"playlist-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: playlist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [playlist.tracks.total, \" chansons\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, playlist.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistPage, \"BCTk3Y7xzsGjR/yakGWS40ZvhwM=\", false, function () {\n  return [useNavigate];\n});\n_c = PlaylistPage;\nexport default PlaylistPage;\nvar _c;\n$RefreshReg$(_c, \"PlaylistPage\");","map":{"version":3,"names":["React","useState","useEffect","getUserPlaylists","useNavigate","jsxDEV","_jsxDEV","PlaylistPage","_s","playlists","setPlaylists","sortedPlaylists","setSortedPlaylists","sortCriteria","setSortCriteria","navigate","fetchPlaylists","data","error","console","sorted","sort","a","b","name","localeCompare","tracks","total","Date","created_at","modified_at","handleViewDetails","playlistId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","playlist","_playlist$images$","onClick","id","src","images","url","alt","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/pages/PlaylistPage.jsx"],"sourcesContent":["// src/pages/PlaylistPage.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getUserPlaylists } from '../services/spotifyService';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './PlaylistPage.css';\r\n\r\nconst PlaylistPage = () => {\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [sortedPlaylists, setSortedPlaylists] = useState([]);\r\n  const [sortCriteria, setSortCriteria] = useState(\"name\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const data = await getUserPlaylists();\r\n        setPlaylists(data);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des playlists :\", error);\r\n      }\r\n    };\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  // Exemple de tri par différents critères  \r\n  // Note : Les propriétés comme duration, creationDate, modificationDate doivent être disponibles.\r\n  // Ici, on suppose que chaque playlist a au moins \"name\" et \"tracks.total\". Pour les autres, on utilise des valeurs fictives.\r\n  useEffect(() => {\r\n    const sorted = [...playlists].sort((a, b) => {\r\n      switch (sortCriteria) {\r\n        case \"name\":\r\n          return a.name.localeCompare(b.name);\r\n        case \"nbChansons\":\r\n          return a.tracks.total - b.tracks.total;\r\n        case \"creationDate\":\r\n          return new Date(a.created_at || 0) - new Date(b.created_at || 0);\r\n        case \"modificationDate\":\r\n          return new Date(a.modified_at || 0) - new Date(b.modified_at || 0);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n    setSortedPlaylists(sorted);\r\n  }, [playlists, sortCriteria]);\r\n\r\n  const handleViewDetails = (playlistId) => {\r\n    navigate(`/playlists/${playlistId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"playlist-page\">\r\n      <h1>Mes Playlists</h1>\r\n      <div className=\"sort-menu\">\r\n        <label>Tri par : </label>\r\n        <select value={sortCriteria} onChange={(e) => setSortCriteria(e.target.value)}>\r\n          <option value=\"name\">Nom</option>\r\n          <option value=\"nbChansons\">Nombre de chansons</option>\r\n          <option value=\"creationDate\">Date de création</option>\r\n          <option value=\"modificationDate\">Date de modification</option>\r\n          {/* Vous pouvez ajouter une option \"durée\" si la durée totale est disponible */}\r\n        </select>\r\n      </div>\r\n      <div className=\"playlists-grid\">\r\n        {sortedPlaylists.map(playlist => (\r\n          <div key={playlist.id} className=\"playlist-card\" onClick={() => handleViewDetails(playlist.id)}>\r\n            <img src={playlist.images[0]?.url || '/default-playlist.png'} alt={playlist.name} className=\"playlist-image\"/>\r\n            <div className=\"playlist-info\">\r\n              <h3>{playlist.name}</h3>\r\n              <p>{playlist.tracks.total} chansons</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}