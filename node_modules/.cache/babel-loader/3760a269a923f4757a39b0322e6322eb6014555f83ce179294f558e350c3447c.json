{"ast":null,"code":"import axios from 'axios';\nimport { getToken } from './authService';\nconst API_BASE = 'https://api.spotify.com/v1';\nconst axiosInstance = axios.create({\n  baseURL: API_BASE,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Ajout d’un interceptor pour inclure le token dans les requêtes\naxiosInstance.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const searchArtists = async query => {\n  const response = await axiosInstance.get(`/search`, {\n    params: {\n      q: query,\n      type: 'artist',\n      limit: 10\n    }\n  });\n  return response.data.artists.items;\n};\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\n  let response = await axiosInstance.get(`/artists/${artistId}/albums`, {\n    params: {\n      include_groups: 'album,single,appears_on,compilation',\n      market: 'US'\n    }\n  });\n  let albums = response.data.items;\n  if (!includeLive) {\n    albums = albums.filter(album => !album.name.toLowerCase().includes('live'));\n  }\n  return albums;\n};\nexport const getAlbumTracks = async albumId => {\n  const response = await axiosInstance.get(`/albums/${albumId}`);\n  return response.data.tracks.items;\n};\nexport const getUserPlaylists = async () => {\n  const response = await axiosInstance.get(`/me/playlists`);\n  return response.data.items;\n};\n\n// D’autres fonctions (création, suppression de playlist, etc.) peuvent être ajoutées ici.","map":{"version":3,"names":["axios","getToken","API_BASE","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","Authorization","searchArtists","query","response","get","params","q","type","limit","data","artists","items","getArtistAlbums","artistId","includeLive","include_groups","market","albums","filter","album","name","toLowerCase","includes","getAlbumTracks","albumId","tracks","getUserPlaylists"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/services/spotifyService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getToken } from './authService';\r\n\r\nconst API_BASE = 'https://api.spotify.com/v1';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_BASE,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Ajout d’un interceptor pour inclure le token dans les requêtes\r\naxiosInstance.interceptors.request.use(config => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const searchArtists = async (query) => {\r\n  const response = await axiosInstance.get(`/search`, {\r\n    params: {\r\n      q: query,\r\n      type: 'artist',\r\n      limit: 10\r\n    }\r\n  });\r\n  return response.data.artists.items;\r\n};\r\n\r\nexport const getArtistAlbums = async (artistId, includeLive = true) => {\r\n  let response = await axiosInstance.get(`/artists/${artistId}/albums`, {\r\n    params: {\r\n      include_groups: 'album,single,appears_on,compilation',\r\n      market: 'US'\r\n    }\r\n  });\r\n  let albums = response.data.items;\r\n  if (!includeLive) {\r\n    albums = albums.filter(album => !album.name.toLowerCase().includes('live'));\r\n  }\r\n  return albums;\r\n};\r\n\r\nexport const getAlbumTracks = async (albumId) => {\r\n  const response = await axiosInstance.get(`/albums/${albumId}`);\r\n  return response.data.tracks.items;\r\n};\r\n\r\nexport const getUserPlaylists = async () => {\r\n  const response = await axiosInstance.get(`/me/playlists`);\r\n  return response.data.items;\r\n};\r\n\r\n// D’autres fonctions (création, suppression de playlist, etc.) peuvent être ajoutées ici.\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,eAAe;AAExC,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC;EACjCC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC/C,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAIU,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACM,aAAa,GAAG,UAAUD,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMG,aAAa,GAAG,MAAOC,KAAK,IAAK;EAC5C,MAAMC,QAAQ,GAAG,MAAMZ,aAAa,CAACa,GAAG,CAAC,SAAS,EAAE;IAClDC,MAAM,EAAE;MACNC,CAAC,EAAEJ,KAAK;MACRK,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EACF,OAAOL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAACC,KAAK;AACpC,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,WAAW,GAAG,IAAI,KAAK;EACrE,IAAIX,QAAQ,GAAG,MAAMZ,aAAa,CAACa,GAAG,CAAC,YAAYS,QAAQ,SAAS,EAAE;IACpER,MAAM,EAAE;MACNU,cAAc,EAAE,qCAAqC;MACrDC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EACF,IAAIC,MAAM,GAAGd,QAAQ,CAACM,IAAI,CAACE,KAAK;EAChC,IAAI,CAACG,WAAW,EAAE;IAChBG,MAAM,GAAGA,MAAM,CAACC,MAAM,CAACC,KAAK,IAAI,CAACA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAC;EAC7E;EACA,OAAOL,MAAM;AACf,CAAC;AAED,OAAO,MAAMM,cAAc,GAAG,MAAOC,OAAO,IAAK;EAC/C,MAAMrB,QAAQ,GAAG,MAAMZ,aAAa,CAACa,GAAG,CAAC,WAAWoB,OAAO,EAAE,CAAC;EAC9D,OAAOrB,QAAQ,CAACM,IAAI,CAACgB,MAAM,CAACd,KAAK;AACnC,CAAC;AAED,OAAO,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMvB,QAAQ,GAAG,MAAMZ,aAAa,CAACa,GAAG,CAAC,eAAe,CAAC;EACzD,OAAOD,QAAQ,CAACM,IAAI,CAACE,KAAK;AAC5B,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}