{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pix\\\\Documents\\\\Projects\\\\spotify-app\\\\src\\\\pages\\\\PlaylistDetails.jsx\",\n  _s = $RefreshSig$();\n// src/pages/PlaylistDetails.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPlaylistInfo, getAllPlaylistTracks, removeTrackFromPlaylist, reorderPlaylistTracks, deletePlaylist, setPlaylistOrder // Fonction personnalisée pour sauvegarder l'ordre réorganisé\n} from '../services/spotifyService';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { FaGripVertical, FaTimes } from 'react-icons/fa';\nimport './PlaylistDetails.css';\n\n// Fonction de mélange (Fisher–Yates)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\nconst PlaylistDetails = () => {\n  _s();\n  var _playlistInfo$images;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [playlistInfo, setPlaylistInfo] = useState(null);\n  const [allTracks, setAllTracks] = useState([]); // Contient toutes les pistes\n  const [loadingInfo, setLoadingInfo] = useState(true);\n  const [loadingTracks, setLoadingTracks] = useState(true);\n  const [loadingDelete, setLoadingDelete] = useState(false);\n  const [loadingRandom, setLoadingRandom] = useState(false);\n  const [totalDurationMs, setTotalDurationMs] = useState(0);\n\n  // Charger les infos de base et toutes les pistes\n  useEffect(() => {\n    const loadData = async () => {\n      setLoadingInfo(true);\n      try {\n        const info = await getPlaylistInfo(id);\n        setPlaylistInfo(info);\n      } catch (err) {\n        console.error(\"Erreur getPlaylistInfo :\", err);\n      } finally {\n        setLoadingInfo(false);\n      }\n      setLoadingTracks(true);\n      try {\n        const tracksData = await getAllPlaylistTracks(id);\n        setAllTracks(tracksData);\n        let total = 0;\n        tracksData.forEach(item => {\n          var _item$track;\n          if ((_item$track = item.track) !== null && _item$track !== void 0 && _item$track.duration_ms) total += item.track.duration_ms;\n        });\n        setTotalDurationMs(total);\n      } catch (err) {\n        console.error(\"Erreur getAllPlaylistTracks :\", err);\n      } finally {\n        setLoadingTracks(false);\n      }\n    };\n    loadData();\n  }, [id]);\n  const navigateHome = () => {\n    navigate('/');\n  };\n  const handleDeletePlaylist = async () => {\n    if (loadingDelete) return;\n    setLoadingDelete(true);\n    try {\n      await deletePlaylist(id);\n      navigateHome();\n    } catch (err) {\n      console.error(\"Erreur lors de la suppression :\", err);\n      alert(\"Impossible de supprimer la playlist.\");\n    } finally {\n      setLoadingDelete(false);\n    }\n  };\n  const handleRemoveTrack = async trackUri => {\n    try {\n      await removeTrackFromPlaylist(id, trackUri);\n      setAllTracks(prev => prev.filter(item => item.track.uri !== trackUri));\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression de la piste :\", error);\n      alert(\"Impossible de retirer la piste.\");\n    }\n  };\n  const onDragEnd = async result => {\n    if (!result.destination) return;\n    const sourceIndex = result.source.index;\n    const destIndex = result.destination.index;\n    if (sourceIndex === destIndex) return;\n    const newOrder = Array.from(allTracks);\n    const [movedItem] = newOrder.splice(sourceIndex, 1);\n    newOrder.splice(destIndex, 0, movedItem);\n    setAllTracks(newOrder);\n    try {\n      await reorderPlaylistTracks(id, sourceIndex, destIndex);\n    } catch (error) {\n      console.error(\"Erreur lors du réordonnancement :\", error);\n      alert(\"Impossible de réordonner les pistes.\");\n    }\n  };\n\n  // Fonction pour randomiser l'ordre de la playlist\n  const handleRandomize = async () => {\n    if (loadingRandom) return;\n    setLoadingRandom(true);\n    try {\n      const shuffled = shuffleArray(allTracks);\n      setAllTracks(shuffled);\n      // On extrait l'ordre des URIs à partir du nouvel ordre\n      const newOrderUris = shuffled.map(item => item.track.uri);\n      // Appel API pour sauvegarder le nouvel ordre (fonction personnalisée)\n      await setPlaylistOrder(id, newOrderUris);\n    } catch (error) {\n      console.error(\"Erreur lors du randomisation :\", error);\n      alert(\"Impossible de randomiser la playlist.\");\n    } finally {\n      setLoadingRandom(false);\n    }\n  };\n  const formatDuration = ms => {\n    const hours = Math.floor(ms / 3600000);\n    const minutes = Math.floor(ms % 3600000 / 60000);\n    const seconds = Math.floor(ms % 60000 / 1000);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${seconds < 10 ? \"0\" : \"\"}${seconds}s`;\n    }\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n  };\n  const totalFormatted = formatDuration(totalDurationMs);\n  if (loadingInfo) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-details loading-state\",\n    children: \"Chargement infos...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 27\n  }, this);\n  if (!playlistInfo) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-details error-state\",\n    children: \"Playlist non trouv\\xE9e.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"playlist-details-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-info-left\",\n        children: ((_playlistInfo$images = playlistInfo.images) === null || _playlistInfo$images === void 0 ? void 0 : _playlistInfo$images.length) > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: playlistInfo.images[0].url,\n          alt: playlistInfo.name,\n          className: \"playlist-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/default-playlist.png\",\n          alt: playlistInfo.name,\n          className: \"playlist-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-info-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: playlistInfo.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), playlistInfo.description && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"playlist-description\",\n          children: playlistInfo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"playlist-duration\",\n          children: [allTracks.length, \" pistes \\u2013 \", totalFormatted]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playlist-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"randomize-playlist-btn\",\n            onClick: handleRandomize,\n            disabled: loadingRandom,\n            children: loadingRandom ? \"Randomisation...\" : \"Randomiser la playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-playlist-btn\",\n            onClick: handleDeletePlaylist,\n            disabled: loadingDelete,\n            children: loadingDelete ? \"Suppression...\" : \"Supprimer la playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks-container\",\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"tracks-droppable\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"tracks-list\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [allTracks.map((item, index) => {\n              var _track$artists, _track$album;\n              const track = item.track;\n              const artists = (_track$artists = track.artists) === null || _track$artists === void 0 ? void 0 : _track$artists.map(a => a.name).join(', ');\n              const albumName = (_track$album = track.album) === null || _track$album === void 0 ? void 0 : _track$album.name;\n              return /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: track.id || track.uri,\n                index: index,\n                children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  className: `track-item ${snapshot.isDragging ? \"dragging\" : \"\"}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"drag-handle\",\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(FaGripVertical, {\n                      size: 20,\n                      color: \"#ccc\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"track-content\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"track-main-line\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"track-number\",\n                        children: [index + 1, \".\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 224,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"track-name\",\n                        children: track.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 225,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 223,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"track-subinfo\",\n                      children: [artists, \" \\u2013 \", albumName]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 227,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"track-right\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"track-duration\",\n                      children: formatDuration(track.duration_ms)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"remove-track-btn\",\n                      onClick: () => handleRemoveTrack(track.uri),\n                      children: /*#__PURE__*/_jsxDEV(FaTimes, {\n                        size: 16,\n                        color: \"#ff4b4b\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 239,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 235,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 25\n                }, this)\n              }, track.id || track.uri, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this);\n            }), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaylistDetails, \"EO7qtY+Qj4acrq4ufGTphSo7KXs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PlaylistDetails;\nexport default PlaylistDetails;\nvar _c;\n$RefreshReg$(_c, \"PlaylistDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getPlaylistInfo","getAllPlaylistTracks","removeTrackFromPlaylist","reorderPlaylistTracks","deletePlaylist","setPlaylistOrder","DragDropContext","Droppable","Draggable","FaGripVertical","FaTimes","jsxDEV","_jsxDEV","shuffleArray","array","newArray","i","length","j","Math","floor","random","PlaylistDetails","_s","_playlistInfo$images","id","navigate","playlistInfo","setPlaylistInfo","allTracks","setAllTracks","loadingInfo","setLoadingInfo","loadingTracks","setLoadingTracks","loadingDelete","setLoadingDelete","loadingRandom","setLoadingRandom","totalDurationMs","setTotalDurationMs","loadData","info","err","console","error","tracksData","total","forEach","item","_item$track","track","duration_ms","navigateHome","handleDeletePlaylist","alert","handleRemoveTrack","trackUri","prev","filter","uri","onDragEnd","result","destination","sourceIndex","source","index","destIndex","newOrder","Array","from","movedItem","splice","handleRandomize","shuffled","newOrderUris","map","formatDuration","ms","hours","minutes","seconds","totalFormatted","className","children","fileName","_jsxFileName","lineNumber","columnNumber","images","src","url","alt","name","description","onClick","disabled","droppableId","provided","ref","innerRef","droppableProps","_track$artists","_track$album","artists","a","join","albumName","album","draggableId","snapshot","draggableProps","isDragging","dragHandleProps","size","color","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Pix/Documents/Projects/spotify-app/src/pages/PlaylistDetails.jsx"],"sourcesContent":["// src/pages/PlaylistDetails.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  getPlaylistInfo,\r\n  getAllPlaylistTracks,\r\n  removeTrackFromPlaylist,\r\n  reorderPlaylistTracks,\r\n  deletePlaylist,\r\n  setPlaylistOrder  // Fonction personnalisée pour sauvegarder l'ordre réorganisé\r\n} from '../services/spotifyService';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { FaGripVertical, FaTimes } from 'react-icons/fa';\r\nimport './PlaylistDetails.css';\r\n\r\n// Fonction de mélange (Fisher–Yates)\r\nconst shuffleArray = (array) => {\r\n  const newArray = [...array];\r\n  for (let i = newArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n  }\r\n  return newArray;\r\n};\r\n\r\nconst PlaylistDetails = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [playlistInfo, setPlaylistInfo] = useState(null);\r\n  const [allTracks, setAllTracks] = useState([]); // Contient toutes les pistes\r\n  const [loadingInfo, setLoadingInfo] = useState(true);\r\n  const [loadingTracks, setLoadingTracks] = useState(true);\r\n  const [loadingDelete, setLoadingDelete] = useState(false);\r\n  const [loadingRandom, setLoadingRandom] = useState(false);\r\n\r\n  const [totalDurationMs, setTotalDurationMs] = useState(0);\r\n\r\n  // Charger les infos de base et toutes les pistes\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setLoadingInfo(true);\r\n      try {\r\n        const info = await getPlaylistInfo(id);\r\n        setPlaylistInfo(info);\r\n      } catch (err) {\r\n        console.error(\"Erreur getPlaylistInfo :\", err);\r\n      } finally {\r\n        setLoadingInfo(false);\r\n      }\r\n\r\n      setLoadingTracks(true);\r\n      try {\r\n        const tracksData = await getAllPlaylistTracks(id);\r\n        setAllTracks(tracksData);\r\n        let total = 0;\r\n        tracksData.forEach(item => {\r\n          if (item.track?.duration_ms) total += item.track.duration_ms;\r\n        });\r\n        setTotalDurationMs(total);\r\n      } catch (err) {\r\n        console.error(\"Erreur getAllPlaylistTracks :\", err);\r\n      } finally {\r\n        setLoadingTracks(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [id]);\r\n\r\n  const navigateHome = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleDeletePlaylist = async () => {\r\n    if (loadingDelete) return;\r\n    setLoadingDelete(true);\r\n    try {\r\n      await deletePlaylist(id);\r\n      navigateHome();\r\n    } catch (err) {\r\n      console.error(\"Erreur lors de la suppression :\", err);\r\n      alert(\"Impossible de supprimer la playlist.\");\r\n    } finally {\r\n      setLoadingDelete(false);\r\n    }\r\n  };\r\n\r\n  const handleRemoveTrack = async (trackUri) => {\r\n    try {\r\n      await removeTrackFromPlaylist(id, trackUri);\r\n      setAllTracks(prev => prev.filter(item => item.track.uri !== trackUri));\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression de la piste :\", error);\r\n      alert(\"Impossible de retirer la piste.\");\r\n    }\r\n  };\r\n\r\n  const onDragEnd = async (result) => {\r\n    if (!result.destination) return;\r\n    const sourceIndex = result.source.index;\r\n    const destIndex = result.destination.index;\r\n    if (sourceIndex === destIndex) return;\r\n\r\n    const newOrder = Array.from(allTracks);\r\n    const [movedItem] = newOrder.splice(sourceIndex, 1);\r\n    newOrder.splice(destIndex, 0, movedItem);\r\n\r\n    setAllTracks(newOrder);\r\n\r\n    try {\r\n      await reorderPlaylistTracks(id, sourceIndex, destIndex);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors du réordonnancement :\", error);\r\n      alert(\"Impossible de réordonner les pistes.\");\r\n    }\r\n  };\r\n\r\n  // Fonction pour randomiser l'ordre de la playlist\r\n  const handleRandomize = async () => {\r\n    if (loadingRandom) return;\r\n    setLoadingRandom(true);\r\n    try {\r\n      const shuffled = shuffleArray(allTracks);\r\n      setAllTracks(shuffled);\r\n      // On extrait l'ordre des URIs à partir du nouvel ordre\r\n      const newOrderUris = shuffled.map(item => item.track.uri);\r\n      // Appel API pour sauvegarder le nouvel ordre (fonction personnalisée)\r\n      await setPlaylistOrder(id, newOrderUris);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors du randomisation :\", error);\r\n      alert(\"Impossible de randomiser la playlist.\");\r\n    } finally {\r\n      setLoadingRandom(false);\r\n    }\r\n  };\r\n\r\n  const formatDuration = (ms) => {\r\n    const hours = Math.floor(ms / 3600000);\r\n    const minutes = Math.floor((ms % 3600000) / 60000);\r\n    const seconds = Math.floor((ms % 60000) / 1000);\r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m ${seconds < 10 ? \"0\" : \"\"}${seconds}s`;\r\n    }\r\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n  };\r\n\r\n  const totalFormatted = formatDuration(totalDurationMs);\r\n\r\n  if (loadingInfo) return <div className=\"playlist-details loading-state\">Chargement infos...</div>;\r\n  if (!playlistInfo) return <div className=\"playlist-details error-state\">Playlist non trouvée.</div>;\r\n\r\n  return (\r\n    <div className=\"playlist-details\">\r\n      <header className=\"playlist-details-header\">\r\n        <div className=\"playlist-info-left\">\r\n          {playlistInfo.images?.length > 0 ? (\r\n            <img\r\n              src={playlistInfo.images[0].url}\r\n              alt={playlistInfo.name}\r\n              className=\"playlist-cover\"\r\n            />\r\n          ) : (\r\n            <img\r\n              src=\"/default-playlist.png\"\r\n              alt={playlistInfo.name}\r\n              className=\"playlist-cover\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"playlist-info-right\">\r\n          <h2>{playlistInfo.name}</h2>\r\n          {playlistInfo.description && (\r\n            <p className=\"playlist-description\">{playlistInfo.description}</p>\r\n          )}\r\n          <p className=\"playlist-duration\">\r\n            {allTracks.length} pistes – {totalFormatted}\r\n          </p>\r\n          <div className=\"playlist-actions\">\r\n            <button\r\n              className=\"randomize-playlist-btn\"\r\n              onClick={handleRandomize}\r\n              disabled={loadingRandom}\r\n            >\r\n              {loadingRandom ? \"Randomisation...\" : \"Randomiser la playlist\"}\r\n            </button>\r\n            <button\r\n              className=\"delete-playlist-btn\"\r\n              onClick={handleDeletePlaylist}\r\n              disabled={loadingDelete}\r\n            >\r\n              {loadingDelete ? \"Suppression...\" : \"Supprimer la playlist\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"tracks-container\">\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Droppable droppableId=\"tracks-droppable\">\r\n            {(provided) => (\r\n              <ul className=\"tracks-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                {allTracks.map((item, index) => {\r\n                  const track = item.track;\r\n                  const artists = track.artists?.map(a => a.name).join(', ');\r\n                  const albumName = track.album?.name;\r\n                  return (\r\n                    <Draggable\r\n                      key={track.id || track.uri}\r\n                      draggableId={track.id || track.uri}\r\n                      index={index}\r\n                    >\r\n                      {(provided, snapshot) => (\r\n                        <li\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          className={`track-item ${snapshot.isDragging ? \"dragging\" : \"\"}`}\r\n                        >\r\n                          {/* Seule l'icône active le drag */}\r\n                          <div className=\"drag-handle\" {...provided.dragHandleProps}>\r\n                            <FaGripVertical size={20} color=\"#ccc\" />\r\n                          </div>\r\n                          <div className=\"track-content\">\r\n                            <div className=\"track-main-line\">\r\n                              <span className=\"track-number\">{index + 1}.</span>\r\n                              <span className=\"track-name\">{track.name}</span>\r\n                            </div>\r\n                            <div className=\"track-subinfo\">\r\n                              {artists} – {albumName}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"track-right\">\r\n                            <span className=\"track-duration\">\r\n                              {formatDuration(track.duration_ms)}\r\n                            </span>\r\n                            <button\r\n                              className=\"remove-track-btn\"\r\n                              onClick={() => handleRemoveTrack(track.uri)}\r\n                            >\r\n                              <FaTimes size={16} color=\"#ff4b4b\" />\r\n                            </button>\r\n                          </div>\r\n                        </li>\r\n                      )}\r\n                    </Draggable>\r\n                  );\r\n                })}\r\n                {/** placeholder pour react-beautiful-dnd */}\r\n                {provided.placeholder}\r\n              </ul>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}